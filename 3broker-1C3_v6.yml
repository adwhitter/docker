---
version: '2'
services:
  zookeeper1:
    image:  confluentinc/cp-zookeeper:latest
    hostname: zookeeper1
    container_name: zookeeper1
    networks:
      - n1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888

  zookeeper2:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper2
    container_name: zookeeper2
    networks:
      - n1
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    depends_on:
      - zookeeper1

  zookeeper3:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper3
    container_name: zookeeper3
    networks:
      - n1
    ports:
      - "2183:2183"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:388;zookeeper3:2888:3888
    depends_on:
      - zookeeper1
      - zookeeper2

  kafka1:
    image: confluentinc/cp-server:latest
    hostname: kafka1
    container_name: kafka1
    networks:
      - n1
    ports:
      - "9091:9091"
      - "8091:8091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182,zookeeper3:2183'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
      KAFKA_JMX_PORT: 8091
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3

  kafka2:
    image: confluentinc/cp-server:latest
    hostname: kafka2
    container_name: kafka2
    networks:
      - n1
    ports:
      - "9092:9092"
      - "8092:8092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182,zookeeper3:2183'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
      KAFKA_JMX_PORT: 8092
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1

  kafka3:
    image: confluentinc/cp-server:latest
    hostname: kafka3
    container_name: kafka3
    networks:
      - n1
    ports:
      - "9093:9093"
      - "8093:8093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182,zookeeper3:2183'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
      KAFKA_JMX_PORT: 8093
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
      - kafka2

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    networks:
      - n1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
      - kafka1
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka2:19092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper2:2182
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021%

  ksql-server1:
    image: confluentinc/cp-ksql-server:latest
    container_name: ksql-server1
    ports:
      - 8088:8088
    depends_on:
      - kafka1
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: confluent_ksql_01
      KSQL_CUB_KAFKA_TIMEOUT: 300
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # Useful settings for development/laptop use - modify as needed for Prod
      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      KSQL_KSQL_SINK_PARTITIONS: 1
      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
      # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksql-server2:
    image: confluentinc/cp-ksql-server:latest
    container_name: ksql-server2
    ports:
      - 8089:8089
    depends_on:
      - kafka1
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: confluent_ksql_01
      KSQL_CUB_KAFKA_TIMEOUT: 300
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # Useful settings for development/laptop use - modify as needed for Prod
      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      KSQL_KSQL_SINK_PARTITIONS: 1
      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
      # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

networks:
  n1:
